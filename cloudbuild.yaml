steps:

# Prepare
- name: gcr.io/cloud-builders/curl
  entrypoint: bash
  args:
  - -c
  - mkdir -p gopath work

# Restore cache
- name: gcr.io/cloud-builders/gsutil
  entrypoint: bash
  args:
  - -c
  - |
    (gsutil cp \
      gs://$_CACHE_BUCKET/$_GITHUB_REPO/tree/$BRANCH_NAME/$_CACHE_NAME.tar.gz \
      /var/tmp/$_CACHE_NAME.tar.gz && \
    tar xvzf /var/tmp/$_CACHE_NAME.tar.gz -C $_CACHE_BASEDIR) || exit 0
- name: gcr.io/cloud-builders/curl
  entrypoint: bash
  args:
  - -c
  - mv $_CACHE_BASEDIR/$_CACHE_DIR/gopkg gopath/pkg || exit 0

# Build
- name: gcr.io/cloud-builders/go:debian
  args:
  - build
  - -o
  - work/$_BIN_NAME
  - .
  env:
  - PROJECT_ROOT=$_GITHUB_REPO
  - GO111MODULE=on

# Test
- name: gcr.io/cloud-builders/npm
  entrypoint: bash
  args:
  - -c
  - |
    mkdir -p $_CACHE_BASEDIR/$_CACHE_DIR && cd $_CACHE_BASEDIR/$_CACHE_DIR
    if [ ! -f node_modules/.bin/bats ]; then
      echo '{"private": true}' > package.json
      npm install bats@$_BATS_VERSION
    fi
- name: gcr.io/cloud-builders/curl
  entrypoint: bash
  args:
  - -c
  - |
    mkdir -p $_CACHE_BASEDIR/$_CACHE_DIR
    if [ ! -f $_CACHE_BASEDIR/$_CACHE_DIR/time ]; then
      apt-get update && apt-get install -y time
      cp /usr/bin/time $_CACHE_BASEDIR/$_CACHE_DIR/time
    fi
- name: gcr.io/cloud-builders/npm
  entrypoint: bash
  args:
  - -c
  - $_CACHE_BASEDIR/$_CACHE_DIR/node_modules/.bin/bats -t test

# Save cache
- name: gcr.io/cloud-builders/curl
  entrypoint: bash
  args:
  - -c
  - |
    mkdir -p $_CACHE_BASEDIR/$_CACHE_DIR && \
    mv gopath/pkg $_CACHE_BASEDIR/$_CACHE_DIR/gopkg
- name: gcr.io/cloud-builders/gsutil
  entrypoint: bash
  args:
  - -c
  - |
    (tar cvzf /var/tmp/$_CACHE_NAME.tar.gz -C $_CACHE_BASEDIR $_CACHE_DIR && \
    gsutil cp \
      /var/tmp/$_CACHE_NAME.tar.gz \
      gs://$_CACHE_BUCKET/$_GITHUB_REPO/tree/$BRANCH_NAME/$_CACHE_NAME.tar.gz) \
    || exit 0

# Upload
- name: gcr.io/cloud-builders/gcloud
  # Decode and decrypt token
  entrypoint: bash
  args:
  - -c
  - |
    [ "$BRANCH_NAME" != "$_MAIN_BRANCH" ] || \
    base64 -d <<< "$_ENCRYPTED_GITHUB_TOKEN" | \
    gcloud kms decrypt \
      --ciphertext-file=- \
      --plaintext-file=work/github-token.txt \
      --location=global \
      --keyring=cloudbuild \
      --key=github_bot
- name: gcr.io/cloud-builders/curl
  # Generate version
  entrypoint: bash
  args:
  - -c
  - |
    [ "$BRANCH_NAME" != "$_MAIN_BRANCH" ] || \
    echo "$(date -u '+%Y%m%d')_$BUILD_ID" > work/version.txt
- name: gcr.io/cloud-builders/curl
  # Generate release info
  entrypoint: bash
  args:
  - -c
  - |
    [ "$BRANCH_NAME" != "$_MAIN_BRANCH" ] || \
    echo '{"tag_name":"build-'"$(< work/version.txt)"'","target_commitish":"'"$COMMIT_SHA"'","name":"Build '"$(< work/version.txt)"'"}' > work/release.json
- name: gcr.io/cloud-builders/curl
  # Create a release on GitHub
  entrypoint: bash
  args:
  - -c
  - |
    [ "$BRANCH_NAME" != "$_MAIN_BRANCH" ] || \
    curl --fail \
      --user "$_GITHUB_USER:$(< work/github-token.txt)" \
      -H "Content-Type: application/json" \
      -X POST \
      -d "$(< work/release.json)" \
      "$_GITHUB_API/releases" | tee work/res.json
- name: gcr.io/cloud-builders/npm
  # Extract release ID
  entrypoint: bash
  args:
  - -c
  - |
    [ "$BRANCH_NAME" != "$_MAIN_BRANCH" ] || \
    node -e \
      'c=require("fs").readFileSync("work/res.json");console.log(JSON.parse(c).id)' \
      | tee work/res_id.txt
- name: gcr.io/cloud-builders/curl
  # Upload the executable to GitHub
  entrypoint: bash
  args:
  - -c
  - |
    [ "$BRANCH_NAME" != "$_MAIN_BRANCH" ] || \
    curl --fail \
      --user "$_GITHUB_USER:$(< work/github-token.txt)" \
      -H "Content-Type: application/json" \
      -X POST \
      --data-binary @work/$_BIN_NAME \
      "$_GITHUB_UPLOADS/releases/$(< work/res_id.txt)/assets?name=$_BIN_NAME"

artifacts:
  objects:
    location: 'gs://$_ARTIFACT_BUCKET/$_GITHUB_REPO/$BUILD_ID'
    paths:
    - work/$_BIN_NAME

substitutions:
  _CACHE_BUCKET: kunoichimarket-cloudbuild-cache
  _ARTIFACT_BUCKET: kunoichimarket-cloudbuild-artifact
  _CACHE_NAME: cache
  _CACHE_BASEDIR: work
  _CACHE_DIR: cache
  _GITHUB_REPO: github.com/kuno1/immortalize
  _GITHUB_USER: kuno1bot
  # _ENCRYPTED_GITHUB_TOKEN is generated with the following commands:
  #
  # gcloud kms encrypt \
  #  --plaintext-file=github-token.txt \
  #  --ciphertext-file=- \
  #  --location=global \
  #  --keyring=cloudbuild \
  #  --key=github_bot | base64 -w 0
  _ENCRYPTED_GITHUB_TOKEN: CiQAoxnLmaebfUQcsL9snYhmYCup645amyxR+woZm99hKydCT/YSUgBUqox8zCXG7ocRPRrWVBgm5XtrjbrnuydD/6vV20Wyr5OtRAPUWRASBfggpH/I7GT2ShW1ja1NX7vdaTk0qfrL2u16DAKnlblvR93G+l2GHdI=
  _GITHUB_API: https://api.github.com/repos/kuno1/immortalize
  _GITHUB_UPLOADS: https://uploads.github.com/repos/kuno1/immortalize
  _BIN_NAME: immortalize
  _BATS_VERSION: 1.1.0
  _MAIN_BRANCH: master
